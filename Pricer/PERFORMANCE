At rev 8, the 10,000 case runs faster than the 1 case. In my opinion this is good, as you don't want the program to fall apart under heavy load.

$ bin/check 

real    0m22.459s
user    0m25.832s
sys     0m2.974s

real    0m19.948s
user    0m26.394s
sys     0m2.732s

real    0m19.072s
user    0m27.351s
sys     0m1.292s

---
The task can be seen to have three operations, which can be run in a parallel pipeline:
 input (7 sec)
 processing ~20 sec
 output ( 1.5 sec)

It's should be possible to reduce the time spent on the input parsing, but replacing the regular expressions with a proper lexer.  However, this would likely have a negligable effect on a multi-core system.

--- 
Changing the price from BigDecimal to double yields almost a 3x performance increase.  This is much more significant than before the IO was optimized. Unfortunately, it makes the third noticably slower. This is because the third run prints many more lines, and formatting doubles to strings is a slow operation.  

real    0m6.625s
user    0m9.294s
sys     0m1.274s

real    0m6.484s
user    0m10.004s
sys     0m0.917s

real    0m11.854s
user    0m16.321s
sys     0m1.013s

compare this to a c++ program:
real    0m2.973s
user    0m3.279s
sys     0m0.070s

real    0m3.204s
user    0m3.521s
sys     0m0.095s

real    0m4.308s
user    0m4.771s
sys     0m0.225s

That the Java is within an order of magnatude of the c++ code is quite good.  

In this example, the multithreading only helps a little bit.  The problem is the tasks are too small, and the Java LinkedBlockingQueue has too much contention.  Larger tasks or lower contention would help.
real    0m6.627s
user    0m6.962s
sys     0m0.407s

real    0m8.036s
user    0m8.183s
sys     0m0.458s

real    0m13.100s
user    0m13.173s
sys     0m0.736s
